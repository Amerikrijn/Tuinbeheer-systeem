name: "Security â€” Secret Scan"

on:
  pull_request:
    branches: [ "main", "preview", "develop" ]
  pull_request_target:
    branches: [ "main", "preview", "develop" ]
  push:
    branches: [ "main", "preview", "develop" ]
  workflow_dispatch:

jobs:
  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: Checkout repository (safe)
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha || github.sha }}
        persist-credentials: false
        fetch-depth: 2

    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y jq

    - name: Run TruffleHog (JSON)
      shell: bash
      run: |
        set -euo pipefail
        docker pull ghcr.io/trufflesecurity/trufflehog:latest
        docker run --rm -v "$PWD:/repo" -w /repo ghcr.io/trufflesecurity/trufflehog:latest \
          filesystem --json --only-verified --fail . | tee trufflehog.json >/dev/null

    - name: Run Gitleaks (JSON)
      id: gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        repository-path: ./
        redact: true
        report-format: json
        report-path: gitleaks.json

    - name: Build prompt for OpenAI from secret findings
      run: |
        TRUFF=$(test -f trufflehog.json && cat trufflehog.json || echo '[]')
        GITL=$(test -f gitleaks.json && cat gitleaks.json || echo '[]')
        {
          echo "You are a senior application security engineer. Analyze leaked-secret findings."
          echo "Return a concise markdown report with:"
          echo "- Which secrets (types) were found and where"
          echo "- Immediate remediation steps (rotate, revoke, invalidate)"
          echo "- Risk assessment and next actions"
          echo
          echo "Repo: ${{ github.repository }} | Commit: ${{ github.sha }}"
          echo
          echo "TruffleHog JSON (truncated to 80k):"
          echo "$TRUFF" | head -c 80000
          echo
          echo "\nGitleaks JSON (truncated to 80k):"
          echo "$GITL" | head -c 80000
        } > secrets-openai-prompt.txt

    - name: Call OpenAI to generate Secret Scan summary
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        set -euo pipefail
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "OPENAI_API_KEY is required and must be set as a repository secret." >&2
          exit 1
        fi
        PAYLOAD=$(jq -n \
          --arg content "$(< secrets-openai-prompt.txt)" \
          '{
            model: "gpt-4o-mini",
            temperature: 0,
            messages: [
              {role:"system", content:"You provide precise, actionable secret-exposure remediation guidance."},
              {role:"user", content:$content}
            ]
          }')
        curl -sSf \
          --retry 5 \
          --retry-delay 2 \
          --retry-on-http 429,500,502,503,504 \
          --retry-max-time 120 \
          https://api.openai.com/v1/chat/completions \
          -H "Authorization: Bearer $OPENAI_API_KEY" \
          -H "Content-Type: application/json" \
          --data "$PAYLOAD" \
          -o openai.secrets.json
        jq -r '.choices[0].message.content // "No content returned by OpenAI."' openai.secrets.json > ai-secret-scan-summary.md

    - name: Upload Secret Scan artifacts
      uses: actions/upload-artifact@v4
      with:
        name: secret-scan-results
        path: |
          trufflehog.json
          gitleaks.json
          ai-secret-scan-summary.md
        retention-days: 30

    - name: Comment AI Secret Scan summary on PR
      if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
      uses: thollander/actions-comment-pull-request@v2
      with:
        filePath: ai-secret-scan-summary.md
        commentTag: ai-secret-scan