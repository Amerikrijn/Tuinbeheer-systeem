name: "LLM Standards Review (Guideline-driven)"

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: llm-standards-review-${{ github.ref }}
  cancel-in-progress: true

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Generate LLM standards review report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Optional LLM integration; if not set, fallback report is used
          LLM_API_URL: ${{ secrets.LLM_API_URL }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
          LLM_MODEL: gpt-4o-mini
        run: |
          node .github/scripts/llm-standards-review.js

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: llm-standards-review
          path: test-results/llm-standards-review.md
          retention-days: 14

      - name: Post PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'test-results/llm-standards-review.md';
            const marker = '<!-- LLM_STANDARDS_REVIEW -->';
            const content = (fs.existsSync(path) ? fs.readFileSync(path, 'utf8') : '# LLM Standards Review') + `\n\n${marker}`;
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const existing = comments.find(c => c.user.type === 'Bot' && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                comment_id: existing.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: content,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: content,
              });
            }
name: "LLM Standards Review (Guideline-driven)"

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: llm-standards-review-${{ github.ref }}
  cancel-in-progress: true

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Generate LLM standards review report
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Optional LLM integration; if not set, fallback report is used
          LLM_API_URL: ${{ secrets.LLM_API_URL }}
          LLM_API_KEY: ${{ secrets.LLM_API_KEY }}
          LLM_MODEL: gpt-4o-mini
        run: |
          node .github/scripts/llm-standards-review.js

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: llm-standards-review
          path: test-results/llm-standards-review.md
          retention-days: 14

      - name: Post PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'test-results/llm-standards-review.md';
            const marker = '<!-- LLM_STANDARDS_REVIEW -->';
            const content = (fs.existsSync(path) ? fs.readFileSync(path, 'utf8') : '# LLM Standards Review') + `\n\n${marker}`;
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const existing = comments.find(c => c.user.type === 'Bot' && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({
                comment_id: existing.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: content,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: content,
              });
            }

