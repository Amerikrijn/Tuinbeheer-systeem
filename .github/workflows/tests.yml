name: Tests

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - name: Run tests with coverage
        id: run-tests
        run: |
          npm run test:coverage > test-output.txt 2>&1 || {
            echo "⚠️ Tests completed with some failures"
            echo "exit_code=$?" >> $GITHUB_OUTPUT
          }
          
          # Show test output
          cat test-output.txt
      
      - name: Generate test summary
        id: generate-summary
        run: |
          echo "📊 Generating test summary..."
          
          # Initialize variables
          TOTAL_TESTS=0
          PASSED_TESTS=0
          FAILED_TESTS=0
          COVERAGE_PERCENT=0
          
          # Parse test output
          if [ -f "test-output.txt" ]; then
            TEST_OUTPUT=$(cat test-output.txt)
            
            # Extract test counts
            if echo "$TEST_OUTPUT" | grep -q "✓.*tests passed"; then
              PASSED_TESTS=$(echo "$TEST_OUTPUT" | grep -o "✓ [0-9]* tests passed" | grep -o "[0-9]*" | head -1 || echo "0")
              TOTAL_TESTS=$PASSED_TESTS
            fi
            
            if echo "$TEST_OUTPUT" | grep -q "✗.*tests failed"; then
              FAILED_TESTS=$(echo "$TEST_OUTPUT" | grep -o "✗ [0-9]* tests failed" | grep -o "[0-9]*" | head -1 || echo "0")
              TOTAL_TESTS=$((PASSED_TESTS + FAILED_TESTS))
            fi
          fi
          
          # Get coverage data
          if [ -d "coverage" ] && [ -f "coverage/lcov.info" ]; then
            COVERAGE_LINES=$(grep -o "LF:[0-9]*" coverage/lcov.info | head -1 | cut -d: -f2 || echo "0")
            COVERAGE_HITS=$(grep -o "LH:[0-9]*" coverage/lcov.info | head -1 | cut -d: -f2 || echo "0")
            
            if [ "$COVERAGE_LINES" != "0" ] && [ "$COVERAGE_HITS" != "0" ]; then
              COVERAGE_PERCENT=$(echo "scale=1; $COVERAGE_HITS * 100 / $COVERAGE_LINES" | bc -l 2>/dev/null || echo "0")
            fi
          fi
          
          # Calculate success rate
          if [ "$TOTAL_TESTS" -gt 0 ]; then
            SUCCESS_RATE=$(echo "scale=1; $PASSED_TESTS * 100 / $TOTAL_TESTS" | bc -l 2>/dev/null || echo "0")
          else
            SUCCESS_RATE=0
          fi
          
          # Set outputs
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          echo "coverage_percent=$COVERAGE_PERCENT" >> $GITHUB_OUTPUT
          
          echo "📊 Test Results:"
          echo "  Total: $TOTAL_TESTS, Passed: $PASSED_TESTS, Failed: $FAILED_TESTS"
          echo "  Success Rate: $SUCCESS_RATE%, Coverage: $COVERAGE_PERCENT%"
      
      - name: Generate GitHub Actions Summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          TOTAL_TESTS="${{ steps.generate-summary.outputs.total_tests }}"
          PASSED_TESTS="${{ steps.generate-summary.outputs.passed_tests }}"
          FAILED_TESTS="${{ steps.generate-summary.outputs.failed_tests }}"
          SUCCESS_RATE="${{ steps.generate-summary.outputs.success_rate }}"
          COVERAGE_PERCENT="${{ steps.generate-summary.outputs.coverage_percent }}"
          
          echo "✅ **Tests Executed**: $TOTAL_TESTS total tests" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Tests Passed**: $PASSED_TESTS tests" >> $GITHUB_STEP_SUMMARY
          if [ "$FAILED_TESTS" -gt 0 ]; then
            echo "❌ **Tests Failed**: $FAILED_TESTS tests" >> $GITHUB_STEP_SUMMARY
          fi
          echo "📊 **Success Rate**: $SUCCESS_RATE%" >> $GITHUB_STEP_SUMMARY
          echo "📈 **Coverage**: $COVERAGE_PERCENT% line coverage" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔍 **Test Framework**: Vitest" >> $GITHUB_STEP_SUMMARY
          echo "📋 **Test Script**: npm run test:coverage" >> $GITHUB_STEP_SUMMARY
      
      - name: Comment on PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const totalTests = '${{ steps.generate-summary.outputs.total_tests }}';
            const passedTests = '${{ steps.generate-summary.outputs.passed_tests }}';
            const failedTests = '${{ steps.generate-summary.outputs.failed_tests }}';
            const successRate = '${{ steps.generate-summary.outputs.success_rate }}';
            const coveragePercent = '${{ steps.generate-summary.outputs.coverage_percent }}';
            
            // Determine status emoji
            let statusEmoji = '🟢';
            if (parseFloat(successRate) < 90) statusEmoji = '🟡';
            if (parseFloat(successRate) < 80) statusEmoji = '🟠';
            if (parseFloat(successRate) < 70) statusEmoji = '🔴';
            
            const report = `## 🧪 **Test Results Summary** ${statusEmoji}

### 📊 **Test Execution**
- **Total Tests**: ${totalTests}
- **Passed**: ${passedTests} ✅
- **Failed**: ${failedTests} ${failedTests > 0 ? '❌' : '✅'}
- **Success Rate**: ${successRate}%

### 📈 **Coverage**
- **Line Coverage**: ${coveragePercent}%

### 🔍 **Details**
- **Framework**: Vitest
- **Command**: \`npm run test:coverage\`
- **Status**: ${parseFloat(successRate) >= 90 ? '🟢 All tests passing' : parseFloat(successRate) >= 80 ? '🟡 Good' : parseFloat(successRate) >= 70 ? '🟠 Needs attention' : '🔴 Critical issues'}

---
*Report generated automatically by GitHub Actions*`;
            
            // Find existing test comment and update it, or create new one
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const existingComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Test Results Summary')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
              console.log('✅ Updated existing test results comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
              console.log('✅ Created new test results comment');
            }

