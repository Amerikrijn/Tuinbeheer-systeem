name: PR Summary & Quality Report

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_run:
    workflows: ["Essential Checks Only", "AI Pipeline v2.0", "PR Quality Gates"]
    types: [completed]

jobs:
  pr-summary:
    name: 📋 PR Summary & Quality Report
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for other workflows
        run: |
          echo "⏳ Waiting for other workflows to complete..."
          sleep 30

      - name: Create Comprehensive PR Summary
        uses: actions/github-script@v7
        with:
          script: |
            try {
              console.log('🔍 Creating comprehensive PR summary...');
              
              // Get workflow runs for this PR
              const { data: workflowRuns } = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: context.payload.pull_request.head.ref,
                per_page: 10
              });
              
              // Get PR details
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });
              
              // Check workflow statuses
              const essentialChecks = workflowRuns.workflow_runs.find(run => 
                run.name === 'Essential Checks Only' && run.status === 'completed'
              );
              
              const aiPipeline = workflowRuns.workflow_runs.find(run => 
                run.name === 'AI Pipeline v2.0' && run.status === 'completed'
              );
              
              const qualityGates = workflowRuns.workflow_runs.find(run => 
                run.name === 'PR Quality Gates' && run.status === 'completed'
              );
              
              // Create comprehensive summary
              const summary = `## 📋 PR Summary & Quality Report
              
              ### 🚀 Workflow Status Overview
              ${essentialChecks ? `- **Essential Checks**: ${essentialChecks.conclusion === 'success' ? '✅ PASSED' : '❌ FAILED'}` : '- **Essential Checks**: ⏳ Pending'}
              ${aiPipeline ? `- **AI Pipeline v2.0**: ${aiPipeline.conclusion === 'success' ? '✅ PASSED' : '❌ FAILED'}` : '- **AI Pipeline v2.0**: ⏳ Pending'}
              ${qualityGates ? `- **Quality Gates**: ${qualityGates.conclusion === 'success' ? '✅ PASSED' : '❌ FAILED'}` : '- **Quality Gates**: ⏳ Pending'}
              
              ### 📊 Code Quality Metrics
              ${aiPipeline && aiPipeline.conclusion === 'success' ? '- **AI Analysis**: ✅ Completed with OpenAI GPT-4' : '- **AI Analysis**: ⏳ Pending or Failed'}
              ${qualityGates && qualityGates.conclusion === 'success' ? '- **Quality Gates**: ✅ All checks passed' : '- **Quality Gates**: ⏳ Pending or Failed'}
              ${essentialChecks && essentialChecks.conclusion === 'success' ? '- **Build & Tests**: ✅ Successful compilation' : '- **Build & Tests**: ⏳ Pending or Failed'}
              
              ### 🔍 Analysis Details
              ${aiPipeline && aiPipeline.conclusion === 'success' ? '- **AI Pipeline**: Check individual AI Pipeline comment for detailed analysis' : ''}
              ${qualityGates && qualityGates.conclusion === 'success' ? '- **Quality Gates**: Check individual Quality Gates comment for test results' : ''}
              ${essentialChecks && essentialChecks.conclusion === 'success' ? '- **Essential Checks**: Check individual Essential Checks comment for build details' : ''}
              
              ### 📋 PR Information
              - **Title**: ${pr.title}
              - **Author**: @${pr.user.login}
              - **Files Changed**: ${pr.changed_files}
              - **Additions**: +${pr.additions}
              - **Deletions**: -${pr.deletions}
              - **Created**: ${new Date(pr.created_at).toLocaleDateString()}
              - **Updated**: ${new Date(pr.updated_at).toLocaleDateString()}
              
              ### 🎯 Next Steps
              ${essentialChecks && essentialChecks.conclusion === 'success' && 
                aiPipeline && aiPipeline.conclusion === 'success' && 
                qualityGates && qualityGates.conclusion === 'success' 
                ? '🎉 **All workflows completed successfully!** This PR is ready for review and merge.' 
                : '⏳ **Some workflows are still running or have failed.** Please wait for completion or check failed workflows.'}
              
              ---
              *Generated by PR Summary workflow - Last updated: ${new Date().toLocaleString()}*`;
              
              // Check if summary comment already exists
              const { data: comments } = await github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              
              const existingSummary = comments.find(comment => 
                comment.user.type === 'Bot' && 
                comment.body.includes('📋 PR Summary & Quality Report')
              );
              
              if (existingSummary) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  comment_id: existingSummary.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: summary
                });
                console.log('✅ Updated existing PR summary comment');
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: summary
                });
                console.log('✅ Created new PR summary comment');
              }
              
            } catch (error) {
              console.error('❌ Error creating PR summary:', error);
              
              // Fallback comment
              const fallbackSummary = `## 📋 PR Summary & Quality Report
              
              ### ⚠️ Summary Status
              The comprehensive summary generation encountered an error.
              
              ### 📋 Manual Review Required
              Please check individual workflow comments for detailed results.
              
              ---
              *PR Summary workflow encountered an error*`;
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: fallbackSummary
              });
            }

      - name: Create Workflow Summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            console.log('## 📋 PR Summary & Quality Report Workflow');
            console.log('');
            console.log('### ✅ Workflow Status');
            console.log(`- **Job**: PR Summary & Quality Report`);
            console.log(`- **Status**: ${job.status === 'success' ? '✅ SUCCESS' : '❌ FAILED'}`);
            console.log(`- **Duration**: ${job.steps ? job.steps.reduce((acc, step) => acc + (step.completed_at ? new Date(step.completed_at) - new Date(step.started_at) : 0), 0) / 1000 : 'Unknown'}s`);
            console.log('');
            console.log('### 🚀 Summary Generation');
            console.log('- **Workflow Analysis**: ✅ Completed');
            console.log('- **PR Summary**: ✅ Generated');
            console.log('- **Quality Report**: ✅ Compiled');
            console.log('');
            console.log('### 📊 What Happened');
            console.log('1. ✅ Analyzed all workflow runs');
            console.log('2. ✅ Compiled comprehensive summary');
            console.log('3. ✅ Posted/updated PR comment');
            console.log('');
            console.log('### 🎯 Result');
            console.log('Comprehensive PR summary with quality metrics has been posted to the PR.');