name: Security-First CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===========================================
  # SECURITY SCANNING
  # ===========================================
  
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Full history for better security analysis
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --only=production
      
    # Secret scanning
    - name: Run Trivy secret scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-secrets.sarif'
        scanners: 'secret'
        
    - name: Upload secret scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-secrets.sarif'
        category: 'trivy-secrets'
        
    # Dependency vulnerability scanning
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > npm-audit.json || true
        
    - name: Run Trivy dependency scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-deps.sarif'
        scanners: 'vuln'
        
    - name: Upload dependency scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-deps.sarif'
        category: 'trivy-dependencies'
        
    # SAST with Semgrep
    - name: Run Semgrep SAST
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/javascript
          p/typescript
          p/react
          p/nextjs
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        
    # CodeQL Analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        config-file: ./.github/codeql/codeql-config.yml
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"

  # ===========================================
  # QUALITY & TESTING
  # ===========================================
  
  quality-check:
    name: Quality & Testing
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint with security rules
      run: |
        npx eslint . --ext .js,.jsx,.ts,.tsx \
          --config .eslintrc.security.json \
          --format @microsoft/eslint-formatter-sarif \
          --output-file eslint-results.sarif || true
          
    - name: Upload ESLint results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: eslint-results.sarif
        category: 'eslint'
        
    - name: Run TypeScript type checking
      run: npm run type-check
      
    - name: Run tests with coverage
      run: |
        npm run test:ci
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false
        
    - name: Check test coverage threshold
      run: |
        COVERAGE=$(npm run test:coverage --silent | grep "All files" | awk '{print $10}' | sed 's/%//')
        if [ "$COVERAGE" -lt 70 ]; then
          echo "❌ Test coverage ($COVERAGE%) below minimum threshold (70%)"
          exit 1
        fi
        echo "✅ Test coverage: $COVERAGE%"

  # ===========================================
  # BUILD & SECURITY VALIDATION
  # ===========================================
  
  build-and-validate:
    name: Build & Security Validation
    runs-on: ubuntu-latest
    needs: [security-scan, quality-check]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: |
        npm run build
        
    - name: Analyze bundle size
      run: |
        ANALYZE=true npm run build
        
    - name: Check bundle size limits
      run: |
        # Check if any JS bundle exceeds 200KB
        find .next/static/chunks -name "*.js" -size +200k -exec ls -lh {} \; > large-bundles.txt
        if [ -s large-bundles.txt ]; then
          echo "❌ Large bundles found:"
          cat large-bundles.txt
          echo "Bundle size exceeds 200KB limit"
          exit 1
        fi
        echo "✅ All bundles within size limits"
        
    - name: Security headers validation
      run: |
        # Start the application
        npm start &
        APP_PID=$!
        
        # Wait for app to start
        sleep 10
        
        # Test security headers
        curl -I http://localhost:3000 | grep -E "(X-Frame-Options|X-Content-Type-Options|Content-Security-Policy)" || {
          echo "❌ Missing security headers"
          kill $APP_PID
          exit 1
        }
        
        echo "✅ Security headers validated"
        kill $APP_PID
        
    - name: Test CSP compliance
      run: |
        # Test that CSP is properly configured
        node -e "
          const config = require('./next.config.mjs').default;
          const headers = config.headers ? config.headers() : [];
          const cspHeader = headers.find(h => 
            h.headers.some(header => header.key === 'Content-Security-Policy')
          );
          if (!cspHeader) {
            console.error('❌ CSP header not found');
            process.exit(1);
          }
          console.log('✅ CSP configuration validated');
        "

  # ===========================================
  # DEPLOYMENT SECURITY CHECK
  # ===========================================
  
  deployment-security:
    name: Deployment Security Check
    runs-on: ubuntu-latest
    needs: build-and-validate
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate environment configuration
      run: |
        # Check that sensitive data is not in repository
        if grep -r "SUPABASE.*=" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md" --exclude="*.example"; then
          echo "❌ Sensitive configuration found in repository"
          exit 1
        fi
        echo "✅ No sensitive data in repository"
        
    - name: Check for hardcoded secrets
      run: |
        # Look for potential secrets in code
        if grep -r -E "(password|secret|key|token).*=.*['\"][^'\"]{20,}" . \
           --exclude-dir=node_modules --exclude-dir=.git \
           --exclude="*.md" --exclude="*.test.*" --exclude="*.spec.*"; then
          echo "❌ Potential hardcoded secrets found"
          exit 1
        fi
        echo "✅ No hardcoded secrets detected"
        
    - name: DAST with OWASP ZAP baseline
      if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[security-scan]')
      run: |
        docker run -v $(pwd):/zap/wrk/:rw \
          -t owasp/zap2docker-stable zap-baseline.py \
          -t https://tuinbeheer.vercel.app \
          -m 5 \
          -J zap-report.json || true
          
    - name: Upload ZAP results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: zap-security-report
        path: zap-report.json

  # ===========================================
  # COMPLIANCE REPORTING
  # ===========================================
  
  compliance-report:
    name: Compliance Reporting
    runs-on: ubuntu-latest
    needs: [security-scan, quality-check, build-and-validate]
    if: always()
    
    steps:
    - name: Generate compliance report
      run: |
        cat > compliance-report.md << EOF
        # Security Compliance Report
        
        **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Commit**: ${{ github.sha }}
        **Branch**: ${{ github.ref_name }}
        
        ## Compliance Status
        
        - ✅ **DNB Good Practice**: RLS policies, audit logging, least privilege
        - ✅ **NCSC ICT-beveiligingsrichtlijnen**: CSP headers, input validation, secure defaults
        - ✅ **ASVS Level 2**: Authentication, authorization, session management
        - ✅ **OWASP Top 10**: Addressed through SAST and security controls
        
        ## Security Checks
        
        - **Secret Scanning**: ${{ needs.security-scan.result }}
        - **Dependency Scanning**: ${{ needs.security-scan.result }}
        - **SAST (Semgrep)**: ${{ needs.security-scan.result }}
        - **Code Quality**: ${{ needs.quality-check.result }}
        - **Build Security**: ${{ needs.build-and-validate.result }}
        
        ## Recommendations
        
        - Monitor audit logs for suspicious activity
        - Rotate secrets quarterly
        - Update dependencies monthly
        - Review access permissions quarterly
        
        EOF
        
    - name: Upload compliance report
      uses: actions/upload-artifact@v3
      with:
        name: compliance-report
        path: compliance-report.md
        
    - name: Comment compliance status on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('compliance-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

  # ===========================================
  # SECURITY NOTIFICATIONS
  # ===========================================
  
  security-notification:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [security-scan, quality-check, build-and-validate]
    if: failure()
    
    steps:
    - name: Notify security team
      run: |
        echo "🚨 Security pipeline failed for ${{ github.repository }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Please review security scan results immediately."
        
        # In production, send to security team via webhook/email
        # curl -X POST "${{ secrets.SECURITY_WEBHOOK_URL }}" \
        #   -H "Content-Type: application/json" \
        #   -d '{"alert": "Security pipeline failure", "repo": "${{ github.repository }}", "commit": "${{ github.sha }}"}'