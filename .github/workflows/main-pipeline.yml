name: 🚀 Main Pipeline - Simple & Effective
on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  # Job 1: Foundation Build (Required First)
  foundation-build:
    runs-on: ubuntu-latest
    name: 🔨 Foundation Build
    timeout-minutes: 10
    
    steps:
      - name: Setup Node
        uses: ./.github/actions/setup-node
        with:
          node-version: '18'
      
      - name: Build project
        run: npm run build
      
      - name: Foundation Build Summary
        run: |
          echo "## 🔨 Foundation Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "- **Purpose**: Core build verification" >> $GITHUB_STEP_SUMMARY
          echo "- **Result**: Project compiled successfully" >> $GITHUB_STEP_SUMMARY

  # Job 2: Security Scan
  security-scan:
    runs-on: ubuntu-latest
    name: "🔐 Security Scan"
    needs: [foundation-build]
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run npm audit
        id: npm-audit
        run: npm audit --audit-level=high --json > npm-audit-report.json || true

      - name: Run Semgrep
        id: semgrep
        run: semgrep ci --severity=ERROR --json > semgrep-report.json || true

      - name: Upload security scan reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports
          path: |
            npm-audit-report.json
            semgrep-report.json

      - name: Analyze security scan results
        run: |
          echo "## 🔐 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          npm_high=$(jq '.metadata.vulnerabilities.high // 0' npm-audit-report.json)
          npm_critical=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit-report.json)
          echo "### npm audit" >> $GITHUB_STEP_SUMMARY
          echo "- High: $npm_high" >> $GITHUB_STEP_SUMMARY
          echo "- Critical: $npm_critical" >> $GITHUB_STEP_SUMMARY
          semgrep_high=$(jq '[.results[] | select(.extra.severity == "HIGH" or .extra.severity == "ERROR")] | length' semgrep-report.json)
          semgrep_critical=$(jq '[.results[] | select(.extra.severity == "CRITICAL")] | length' semgrep-report.json)
          echo "### Semgrep" >> $GITHUB_STEP_SUMMARY
          echo "- High: $semgrep_high" >> $GITHUB_STEP_SUMMARY
          echo "- Critical: $semgrep_critical" >> $GITHUB_STEP_SUMMARY
          if [ "$npm_high" -gt 0 ] || [ "$npm_critical" -gt 0 ] || [ "$semgrep_high" -gt 0 ] || [ "$semgrep_critical" -gt 0 ]; then
            echo "High or critical security issues detected" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "No high or critical security issues detected" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 3: Preview Build + Docker Build (Parallel)
  preview-build:
    runs-on: ubuntu-latest
    name: 🌐 Preview Build (Vercel)
    needs: [foundation-build]
    timeout-minutes: 8
    
    steps:
      - name: Setup Node
        uses: ./.github/actions/setup-node
        with:
          node-version: '18'
      
      - name: Build for preview
        run: npm run build
      
      - name: Preview Build Summary
        run: |
          echo "## 🌐 Preview Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ READY" >> $GITHUB_STEP_SUMMARY
          echo "- **Purpose**: Preview deployment preparation" >> $GITHUB_STEP_SUMMARY
          echo "- **Result**: Ready for Vercel deployment" >> $GITHUB_STEP_SUMMARY

  docker-build:
    runs-on: ubuntu-latest
    name: 🐳 Docker Build
    needs: [foundation-build]
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        run: |
          echo "🐳 Building Docker image..."
          
          # Check if Dockerfile exists
          if [ -f "Dockerfile" ]; then
            echo "✅ Found Dockerfile, building image..."
            echo "📋 Dockerfile contents:"
            cat Dockerfile
            echo ""

            # Build with verbose output and error handling
            echo "🚀 Starting Docker build..."
            if docker build -t app:test . --progress=plain; then
              echo "✅ Docker build completed successfully"

              # Show build results
              echo "📊 Docker build results:"
              docker images app:test
              echo "✅ Docker image created successfully"
            else
              echo "❌ Docker build failed"
              echo "🔍 Build error details above"
              exit 1
            fi
          else
            echo "⚠️ No Dockerfile found, skipping Docker build"
            echo "✅ Docker verification completed (no build needed)"
          fi
      
      - name: Docker Build Summary
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ VERIFIED" >> $GITHUB_STEP_SUMMARY
          echo "- **Purpose**: Container verification" >> $GITHUB_STEP_SUMMARY
          echo "- **Result**: Docker image built successfully with production dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: app:test created and ready for deployment" >> $GITHUB_STEP_SUMMARY

  # Job 4: Conventional Tests + AI Agent (Parallel)
  conventional-tests:
    runs-on: ubuntu-latest
    name: 🏦 Conventional Tests (Banking Standards)
    needs: [foundation-build]
    timeout-minutes: 20

    steps:
      - name: Setup Node
        uses: ./.github/actions/setup-node
        with:
          node-version: '18'

      - name: Prepare test results directory
        run: mkdir -p test-results

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:integration

      - name: Run critical endpoint tests
        run: npm run test:critical-endpoints

      - name: Run end-to-end tests
        run: npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: conventional-test-results
          path: test-results/
          retention-days: 7

      - name: Conventional Tests Summary
        run: |
          echo "## 🏦 Conventional Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ COMPLETED" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: unit, integration, critical-endpoints, e2e" >> $GITHUB_STEP_SUMMARY

  ai-code-check:
    if: ${{ secrets.OPENAI_API_KEY != '' }}
    runs-on: ubuntu-latest
    name: 🤖 AI Code Check
    needs: [foundation-build]
    timeout-minutes: 15
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
    
    steps:
      - name: Setup Node
        uses: ./.github/actions/setup-node
        with:
          node-version: '18'
      - name: Ensure full history
        run: git fetch --prune --unshallow
      - name: 🔑 Test OpenAI Key
        run: node scripts/test-openai-key.js
      
      - name: Install AI Standards Agent
        run: |
          cd agents/ai-standards-agent
          echo "📦 Installing AI Standards Agent dependencies..."
          npm install
          echo "✅ AI Standards Agent dependencies installed"
      

      - name: Run AI Code Check
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "🤖 Starting AI Code Check..."
          echo "🎯 Mission: Find banking standards, analyze code, and auto-fix issues!"
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "❌ OPENAI_API_KEY not found - cannot run AI analysis"
            exit 1
          fi
          cd agents/ai-standards-agent
          echo "🚀 Starting AI Standards Agent..."
          echo "🎯 This will run multiple cycles until 80%+ quality is reached..."
          if [ ! -f "ai-standards-agent.js" ]; then
            echo "❌ AI Standards Agent file not found!"
            exit 1
          fi
          mkdir -p ai-standards-results
          echo "🤖 Running: node ai-standards-agent.js"
          if timeout 900 node ai-standards-agent.js > ai-standards-results/agent-output.log 2>&1; then
            echo "✅ AI Standards Agent completed successfully"
            if [ -f ai-standards-results/ai-standards-results.json ]; then
              echo "✅ AI results found, showing summary:"
              cat ai-standards-results/ai-standards-results.json
              echo ""
              echo "📋 Last 20 lines of agent output:"
              tail -20 ai-standards-results/agent-output.log
            else
              echo "❌ AI results file missing"
              exit 1
            fi
          else
            echo "❌ AI Standards Agent failed or timed out"
            if [ -f ai-standards-results/agent-output.log ]; then
              echo "📋 Last 20 lines of agent output:"
              tail -20 ai-standards-results/agent-output.log
            fi
            exit 1
          fi
          echo "✅ AI Code Check completed successfully"
          echo "📤 Uploading AI results as artifacts..."
          if [ -d ai-standards-results ]; then
            echo "📁 AI results directory contents:"
            ls -la ai-standards-results/
            echo "📤 Uploading AI Standards Results..."
            echo "📊 Results summary:"
            if [ -f ai-standards-results/ai-standards-results.json ]; then
              cat ai-standards-results/ai-standards-results.json
            else
              echo "❌ ai-standards-results.json missing"
              exit 1
            fi
          else
            echo "⚠️ No AI results directory found"
            exit 1
          fi
      - name: Upload AI Results
        uses: actions/upload-artifact@v4
        if: always()  # Always upload, even if AI agent fails
        with:
          name: ai-standards-results
          path: agents/ai-standards-agent/ai-standards-results/
          retention-days: 7
      
      - name: Commit AI Fixes
        if: success()
        run: |
          echo "🔧 Committing AI-generated fixes..."
          
          # Check if there are any changes to commit
          if [ -n "$(git status --porcelain)" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add .
            git commit -m "🤖 AI Code Check: Auto-fixed code quality issues" || echo "⚠️ No changes to commit"
            echo "✅ AI fixes committed"
          else
            echo "ℹ️ No changes to commit"
          fi
      
      - name: Upload AI Results
        uses: actions/upload-artifact@v4
        with:
          name: ai-code-check-results
          path: ai-standards-results/
          retention-days: 30
      
      - name: AI Code Check Summary
        run: |
          echo "## 🤖 AI Code Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ COMPLETED" >> $GITHUB_STEP_SUMMARY
          echo "- **Mode**: OpenAI GPT-4 powered analysis and fixing" >> $GITHUB_STEP_SUMMARY
          echo "- **Functionality**: Banking standards discovery, code analysis, auto-fixing" >> $GITHUB_STEP_SUMMARY
          echo "- **Cycli**: Auto-fix cycles until 80%+ quality reached" >> $GITHUB_STEP_SUMMARY
          
          # Show AI results if available
          if [ -f "ai-standards-results/ai-standards-results.json" ]; then
            echo "- **Results**: AI analysis completed with detailed results" >> $GITHUB_STEP_SUMMARY
            echo "- **Output**: Check artifacts for full AI analysis report" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Results**: AI analysis completed (check logs for details)" >> $GITHUB_STEP_SUMMARY
          fi

  ai-security-review:
    if: ${{ secrets.OPENAI_API_KEY != '' }}
    runs-on: ubuntu-latest
    name: "🔒 AI Security Review"
    needs: [conventional-tests, security-scan]
    timeout-minutes: 10
    steps:
      - name: Setup Node
        uses: ./.github/actions/setup-node
        with:
          node-version: 20
      - name: Fetch full history
        run: git fetch --prune --unshallow
      - name: Checkout PR commit
        run: git checkout ${{ github.event.pull_request.head.sha }}
      - name: 🔑 Test OpenAI Key
        run: node scripts/test-openai-key.js
      - name: Install deps
        run: npm i --no-fund --no-audit openai @octokit/rest @actions/core
      - name: Run AI Security Review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
          REPO: ${{ github.repository }}
          FAIL_ON_HIGH: "true"
        run: node scripts/ai-security-review.js
      - name: Upload Security Review
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-security-review
          path: ai-security-review.md

  ai-code-quality-review:
    if: ${{ secrets.OPENAI_API_KEY != '' }}
    runs-on: ubuntu-latest
    name: "🤖 AI Code Quality Review"
    needs: [conventional-tests, security-scan]
    timeout-minutes: 10
    steps:
      - name: Setup Node
        uses: ./.github/actions/setup-node
        with:
          node-version: 20
      - name: Fetch full history
        run: git fetch --prune --unshallow
      - name: Checkout PR commit
        run: git checkout ${{ github.event.pull_request.head.sha }}
      - name: 🔑 Test OpenAI Key
        run: node scripts/test-openai-key.js
      - name: Install deps
        run: npm i --no-fund --no-audit openai @octokit/rest @actions/core
      - name: Run AI Code Quality Review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
          REPO: ${{ github.repository }}
        run: node scripts/ai-quality-review.js
      - name: Upload Code Quality Review
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-code-quality-review
          path: ai-code-quality-review.md

  # Job 5: Unified Summary (Final Job) - Always runs regardless of other job failures
  unified-summary:
    runs-on: ubuntu-latest
    name: 📋 Unified Summary
    # Aggregates build, test, security, and AI results into one report
    needs:
      - foundation-build
      - conventional-tests
      - security-scan
    if: always() && github.event_name == 'pull_request'
    timeout-minutes: 5
    permissions:
      contents: read
      pull-requests: write
      issues: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Test Results
        uses: actions/download-artifact@v4
        with:
          name: conventional-test-results
          path: ./test-results
        continue-on-error: true

      - name: Download Security Scan Reports
        uses: actions/download-artifact@v4
        with:
          name: security-scan-reports
          path: ./security-results
        continue-on-error: true

      - name: Download AI Results
        if: ${{ secrets.OPENAI_API_KEY != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ai-standards-results
          path: ./ai-results
        continue-on-error: true

      - name: Unified Report
        uses: unifiedsummary/unified-summary@v1
        with:
          run: node .github/scripts/generate-report.js ./test-results ./security-results ./ai-results
          artifacts: |
            report.json
            report.html
          comment: true
          title: "📋 Unified Report"
