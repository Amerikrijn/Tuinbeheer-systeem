name: "Security — Code Quality"

on:
  pull_request:
    branches: [ "main", "preview", "develop" ]
  pull_request_target:
    branches: [ "main", "preview", "develop" ]
  push:
    branches: [ "main", "preview", "develop" ]
  workflow_dispatch:

concurrency:
  group: security-code-quality-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  analyze:
    name: ${{ github.event_name == 'pull_request' && 'Analyze PR code (safe, no repo perms)' || github.event_name == 'pull_request_target' && 'Publish analysis results (privileged)' || 'Analyze (push/dispatch)' }}
    runs-on: ubuntu-latest
    environment: ci-ai
    permissions:
      actions: read
      contents: read
      security-events: write
      pull-requests: write
    steps:
    - name: Checkout repository (safe)
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.base.sha || (github.event.pull_request.head.sha || github.sha) }}
        persist-credentials: false
        fetch-depth: 2

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript

    - name: Autobuild (skip on pull_request_target)
      if: github.event_name != 'pull_request_target'
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"

    - name: Install jq
      run: |
        sudo apt-get update && sudo apt-get install -y jq

    - name: Collect CodeQL alerts as JSON
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        REPO="${{ github.repository }}"
        PAGE=1
        echo "[]" > codeql-alerts.json

        request_with_retry() {
          method="$1"; url="$2"; data="${3:-}"
          attempts=0
          max_attempts=6
          while :; do
            attempts=$((attempts+1))
            headers_file="$(mktemp)"
            if [ -n "$data" ]; then
              http_code="$(curl -sS -D "$headers_file" -w '%{http_code}' -o response.out \
                -H "User-Agent: github-actions" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                -X "$method" --data "$data" "$url" || true)"
            else
              http_code="$(curl -sS -D "$headers_file" -w '%{http_code}' -o response.out \
                -H "User-Agent: github-actions" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                -X "$method" "$url" || true)"
            fi
            if [ "$http_code" -lt 400 ]; then
              cat response.out
              rm -f "$headers_file" response.out
              return 0
            fi
            if [ "$attempts" -ge "$max_attempts" ]; then
              echo "HTTP $http_code from $url after $attempts attempts" >&2
              cat response.out >&2 || true
              rm -f "$headers_file" response.out
              exit 22
            fi
            retry_after="$(grep -i '^Retry-After:' "$headers_file" | awk '{print $2}' | tr -d '\r')"
            sleep "${retry_after:-$(( 3 * attempts ))}"
            rm -f "$headers_file" response.out
          done
        }

        while true; do
          RESP="$(request_with_retry GET "https://api.github.com/repos/$REPO/code-scanning/alerts?per_page=100&page=$PAGE")"
          COUNT=$(echo "$RESP" | jq 'length')
          if [ "$COUNT" -eq 0 ]; then break; fi
          jq -s '.[0] + .[1]' codeql-alerts.json <(echo "$RESP") > codeql-alerts.tmp && mv codeql-alerts.tmp codeql-alerts.json
          PAGE=$((PAGE+1))
        done
        echo "Collected $(jq 'length' codeql-alerts.json) alerts"

    - name: Build prompt for OpenAI from alerts
      run: |
        {
          echo "You are a senior security/code-quality engineer. Analyze these CodeQL alerts."
          echo "Return a concise markdown report with:"
          echo "- Top risks grouped by severity"
          echo "- Exact files and categories"
          echo "- Concrete fix advice and references"
          echo "- Quick wins to reduce alerts"
          echo
          echo "Repo: ${{ github.repository }} | Commit: ${{ github.sha }}"
          echo
          echo "Alerts JSON (truncated to 120k chars):"
          head -c 120000 codeql-alerts.json
        } > codeql-openai-prompt.txt

    - name: Test Environment Access
      run: |
        echo "=== ENVIRONMENT TEST ==="
        echo "Environment: ${{ github.event_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Working directory: $(pwd)"
        echo "Available files:"
        ls -la
        
        echo "=== SECRET TEST ==="
        if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
          echo "✅ Repository secret accessible (length: ${{ length(secrets.OPENAI_API_KEY) }})"
        else
          echo "❌ Repository secret NOT accessible"
        fi
        
        echo "=== ENVIRONMENT TEST COMPLETE ==="

    - name: Generate AI Code Quality summary
      if: ${{ github.event_name == 'pull_request_target' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
      id: openai
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "=== DEBUG: Starting OpenAI Summary Generation ==="
        echo "Debug: Environment: ${{ github.event_name }}"
        echo "Debug: Repository: ${{ github.repository }}"
        echo "Debug: Branch: ${{ github.ref_name }}"
        echo "Debug: Commit: ${{ github.sha }}"
        echo "Debug: Current working directory: $(pwd)"
        echo "Debug: Available files:"
        ls -la
        
        echo "=== DEBUG: Secret Access Test ==="
        echo "Debug: OPENAI_API_KEY length: ${#OPENAI_API_KEY}"
        echo "Debug: OPENAI_API_KEY starts with: ${OPENAI_API_KEY:0:7}..."
        echo "Debug: OPENAI_API_KEY ends with: ...${OPENAI_API_KEY: -4}"
        
        echo "=== DEBUG: Prerequisites Check ==="
        if [ -f "codeql-openai-prompt.txt" ]; then
          echo "✅ codeql-openai-prompt.txt exists"
          echo "File size: $(wc -c < codeql-openai-prompt.txt) bytes"
          echo "First 100 chars:"
          head -c 100 codeql-openai-prompt.txt
          echo ""
        else
          echo "❌ codeql-openai-prompt.txt missing"
          echo "Available files in current directory:"
          ls -la *.txt 2>/dev/null || echo "No .txt files found"
        fi
        
        if command -v jq &> /dev/null; then
          echo "✅ jq is available: $(jq --version)"
        else
          echo "❌ jq not found"
        fi
        
        if command -v curl &> /dev/null; then
          echo "✅ curl is available: $(curl --version | head -n1)"
        else
          echo "❌ curl not found"
        fi
        
        echo "=== DEBUG: Setting strict bash mode ==="
        set -euo pipefail
        echo "✅ set -euo pipefail completed successfully"
        
        echo "=== DEBUG: Secret validation ==="
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "❌ ERROR: OPENAI_API_KEY is empty after set -euo pipefail!" >&2
          echo "Debug: This suggests the secret is not accessible in the environment" >&2
          echo "Debug: Environment context: ${{ github.event_name }}" >&2
          exit 1
        fi
        
        echo "✅ OPENAI_API_KEY validation passed - secret is accessible"
        echo "=== END DEBUG ==="
        
        # Build payload for OpenAI
        echo "=== DEBUG: Building OpenAI payload ==="
        PAYLOAD=$(jq -n \
          --arg content "$(< codeql-openai-prompt.txt)" \
          '{
            model: "gpt-4o-mini",
            temperature: 0,
            messages: [
              {role:"system", content:"You write precise, actionable security/code-quality reports."},
              {role:"user", content:$content}
            ]
          }')
        echo "✅ Payload built successfully"
        echo "Payload preview: ${PAYLOAD:0:100}..."

        openai_post_with_retry() {
          data="$1"
          attempts=0
          max_attempts=6
          url="https://api.openai.com/v1/chat/completions"
          echo "=== DEBUG: Starting OpenAI API call ==="
          while :; do
            attempts=$((attempts+1))
            echo "Debug: Attempt $attempts of $max_attempts"
            headers_file="$(tmpfile=$(mktemp) && echo "$tmpfile")"
            echo "Debug: Using headers file: $headers_file"
            http_code="$(curl -sS -D "$headers_file" -w '%{http_code}' -o openai.out.json \
              -H "User-Agent: github-actions" \
              -H "Authorization: Bearer $OPENAI_API_KEY" \
              -H "Content-Type: application/json" \
              --data "$data" "$url" || true)"
            echo "Debug: HTTP response code: $http_code"
            if [ "$http_code" -lt 400 ]; then
              echo "✅ OpenAI API call successful (HTTP $http_code)"
              rm -f "$headers_file"
              return 0
            fi
            if [ "$attempts" -ge "$max_attempts" ]; then
              echo "❌ OpenAI HTTP $http_code after $attempts attempts" >&2
              echo "Debug: Response content:" >&2
              cat openai.out.json >&2 || true
              rm -f "$headers_file"
              exit 22
            fi
            retry_after="$(grep -i '^Retry-After:' "$headers_file" | awk '{print $2}' | tr -d '\r')"
            echo "Debug: Retry after: ${retry_after:-$(( 3 * attempts ))} seconds"
            sleep "${retry_after:-$(( 3 * attempts ))}"
            rm -f "$headers_file"
          done
        }

        echo "=== DEBUG: Calling OpenAI API ==="
        openai_post_with_retry "$PAYLOAD"
        echo "✅ OpenAI API call completed"

        echo "=== DEBUG: Processing OpenAI response ==="
        CONTENT=$(jq -r '.choices[0].message.content // empty' openai.out.json 2>/dev/null || true)
        echo "Debug: Content length: ${#CONTENT}"
        if [ -z "$CONTENT" ]; then
          echo "❌ Error: OpenAI returned empty content" >&2
          echo "Debug: Response file content:" >&2
          cat openai.out.json >&2 || true
          exit 1
        fi
        echo "✅ Content validation passed"
        echo "$CONTENT" > ai-code-quality-summary.md
        echo "✅ Summary written to ai-code-quality-summary.md"

    - name: Upload CodeQL AI summary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ai-code-quality-summary
        path: ai-code-quality-summary.md
        retention-days: 30

    - name: Comment AI Code Quality summary on PR
      if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
      uses: thollander/actions-comment-pull-request@v2
      with:
        filePath: ai-code-quality-summary.md
        commentTag: ai-code-quality