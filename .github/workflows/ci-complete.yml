name: CI/CD — Complete Pipeline

on:
  pull_request:
    branches: [ main, preview, develop ]
  push:
    branches: [ main, preview, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  actions: read

concurrency:
  group: ci-complete-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  CI: true

jobs:
  # Job 1: Traditional CI Tests
  traditional-tests:
    name: 🧪 Traditional Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint check
        run: npm run lint

      - name: 🔍 Type check
        run: npm run typecheck

      - name: 🧪 Run tests with coverage
        run: npm run test:ci

      - name: 📊 Enforce coverage threshold (min 30%)
        run: |
          if [ ! -f coverage/lcov.info ]; then
            echo "❌ No coverage report (tests failed or coverage disabled)."
            exit 1
          fi
          COVERAGE=$(awk -F: '/^LH:/ {lh+=$2} /^LF:/ {lf+=$2} END { if (lf>0) printf "%.2f", (lh/lf)*100 }' coverage/lcov.info)
          echo "Line coverage: ${COVERAGE}%"
          THRESH=30
          below=$(awk -v c="$COVERAGE" -v t="$THRESH" 'BEGIN{ if (c+0<t+0) print 1; else print 0 }')
          if [ "$below" -eq 1 ]; then
            echo "❌ Coverage ${COVERAGE}% < ${THRESH}%"; exit 1
          fi
          echo "✅ Coverage OK"

      - name: 📤 Upload coverage artifacts
        if: hashFiles('coverage/lcov.info') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: 📤 Upload test results
        if: hashFiles('test-results/*.xml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 30

  # Job 2: AI Pipeline Execution
  ai-pipeline:
    name: 🤖 AI Pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🛠️ Install system tools
        run: |
          sudo apt-get update && sudo apt-get install -y jq git

      - name: 🔍 Compute code diff
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            git fetch origin "${{ github.base_ref }}" --depth=1 || true
            git diff --unified=0 "origin/${{ github.base_ref }}"... > diff.patch || true
            echo "Diff lines: $(wc -l < diff.patch || echo 0)"
          else
            echo "Push event - no diff to compute"
            echo "" > diff.patch
          fi

      - name: 🧪 Run AI-enhanced tests
        run: |
          echo "Running AI-enhanced test suite..."
          npm run test:ci || echo "Tests completed with some failures (continuing AI analysis)"

      - name: 🤖 Execute AI Pipeline
        run: |
          echo "🚀 Starting AI Pipeline Execution..."
          
          # Create AI pipeline results directory
          mkdir -p ai-pipeline-results
          
          # Run AI pipeline steps
          echo "Step 1: Test Generation Analysis"
          npm run test:coverage > ai-pipeline-results/test-generation.log 2>&1 || true
          
          echo "Step 2: Quality Analysis"
          npm run lint > ai-pipeline-results/quality-analysis.log 2>&1 || true
          
          echo "Step 3: Security Analysis"
          npm run audit:security > ai-pipeline-results/security-analysis.log 2>&1 || true
          
          echo "Step 4: Performance Analysis"
          npm run build > ai-pipeline-results/performance-analysis.log 2>&1 || true
          
          echo "✅ AI Pipeline completed"

      - name: 📊 Generate AI Analysis Report
        run: |
          cat > ai-pipeline-results/ai-analysis-report.md << 'EOF'
          # AI Pipeline Analysis Report
          
          ## Summary
          Generated on: $(date)
          Event: ${{ github.event_name }}
          Branch: ${{ github.ref_name }}
          
          ## Test Generation Results
          ```bash
          $(cat ai-pipeline-results/test-generation.log | tail -20)
          ```
          
          ## Quality Analysis Results
          ```bash
          $(cat ai-pipeline-results/quality-analysis.log | tail -20)
          ```
          
          ## Security Analysis Results
          ```bash
          $(cat ai-pipeline-results/security-analysis.log | tail -20)
          ```
          
          ## Performance Analysis Results
          ```bash
          $(cat ai-pipeline-results/performance-analysis.log | tail -20)
          ```
          
          ## Recommendations
          - Review test coverage gaps
          - Address any linting issues
          - Fix security vulnerabilities
          - Optimize build performance
          
          EOF

      - name: 📤 Upload AI pipeline results
        uses: actions/upload-artifact@v4
        with:
          name: ai-pipeline-results
          path: ai-pipeline-results/
          retention-days: 30

      - name: 💬 Comment AI results on PR
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: ai-pipeline-results/ai-analysis-report.md
          commentTag: ai-pipeline

  # Job 3: Build and Deploy Check
  build-check:
    name: 🏗️ Build Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          retention-days: 30

  # Job 4: Final Report Generation
  generate-report:
    name: 📊 Generate Final Report
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Generate comprehensive report
        run: |
          cat > ci-complete-report.md << 'EOF'
          # 🚀 CI/CD Complete Pipeline Report
          
          ## 📅 Execution Summary
          - **Workflow**: ${{ github.workflow }}
          - **Event**: ${{ github.event_name }}
          - **Branch**: ${{ github.ref_name }}
          - **Commit**: ${{ github.sha }}
          - **Timestamp**: $(date)
          
          ## 🔍 Job Status
          - **Traditional Tests**: ${{ needs.traditional-tests.result }}
          - **AI Pipeline**: ${{ needs.ai-pipeline.result }}
          - **Build Check**: ${{ needs.build-check.result }}
          
          ## 📈 Test Results
          Traditional tests completed with status: ${{ needs.traditional-tests.result }}
          
          ## 🤖 AI Pipeline Results
          AI pipeline completed with status: ${{ needs.ai-pipeline.result }}
          
          ## 🏗️ Build Results
          Build check completed with status: ${{ needs.build-check.result }}
          
          ## 🎯 Next Steps
          EOF
          
          if [ "${{ needs.traditional-tests.result }}" == "success" ]; then
            echo "- ✅ Traditional tests passed" >> ci-complete-report.md
          else
            echo "- ❌ Traditional tests failed - review required" >> ci-complete-report.md
          fi
          
          if [ "${{ needs.ai-pipeline.result }}" == "success" ]; then
            echo "- ✅ AI pipeline completed successfully" >> ci-complete-report.md
          else
            echo "- ⚠️ AI pipeline had issues - review logs" >> ci-complete-report.md
          fi
          
          if [ "${{ needs.build-check.result }}" == "success" ]; then
            echo "- ✅ Build check passed" >> ci-complete-report.md
          else
            echo "- ❌ Build check failed - review required" >> ci-complete-report.md
          fi

      - name: 📤 Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: ci-complete-report
          path: ci-complete-report.md
          retention-days: 30

      - name: 💬 Comment final report on PR
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: ci-complete-report.md
          commentTag: ci-complete-report