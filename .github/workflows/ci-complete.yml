name: CI/CD — Complete Pipeline

on:
  pull_request:
    branches: [ main, preview, develop ]
  push:
    branches: [ main, preview, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  actions: read

concurrency:
  group: ci-complete-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  CI: true

jobs:
  # Job 1: Traditional CI Tests
  traditional-tests:
    name: 🧪 Traditional Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint check
        run: npm run lint

      - name: 🔍 Type check
        run: npm run typecheck

      - name: 🧪 Run tests with coverage
        run: npm run test:ci

      - name: 📊 Enforce coverage threshold (min 30%)
        run: |
          if [ ! -f coverage/lcov.info ]; then
            echo "❌ No coverage report (tests failed or coverage disabled)."
            exit 1
          fi
          COVERAGE=$(awk -F: '/^LH:/ {lh+=$2} /^LF:/ {lf+=$2} END { if (lf>0) printf "%.2f", (lh/lf)*100 }' coverage/lcov.info)
          echo "Line coverage: ${COVERAGE}%"
          THRESH=30
          below=$(awk -v c="$COVERAGE" -v t="$THRESH" 'BEGIN{ if (c+0<t+0) print 1; else print 0 }')
          if [ "$below" -eq 1 ]; then
            echo "❌ Coverage ${COVERAGE}% < ${THRESH}%"; exit 1
          fi
          echo "✅ Coverage OK"

      - name: 📤 Upload coverage artifacts
        if: hashFiles('coverage/lcov.info') != ''
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: 📤 Upload test results
        if: hashFiles('test-results/*.xml') != ''
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 30

  # Job 2: Build and Deploy Check
  build-check:
    name: 🏗️ Build Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: .next/
          retention-days: 30

  # Job 3: Final Report Generation
  generate-report:
    name: 📊 Generate Final Report
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [traditional-tests, build-check]
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🛠️ Install jq
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: 🔎 Collect coverage and test results
        run: |
          if [ -f coverage/lcov.info ]; then
            LINE_COV=$(awk -F: '/^LH:/ {lh+=$2} /^LF:/ {lf+=$2} END { if (lf>0) printf "%.2f", (lh/lf)*100 }' coverage/lcov.info)
          else
            LINE_COV="N/A"
          fi
          echo "LINE_COV=${LINE_COV}" >> $GITHUB_ENV

      - name: 🧠 Build OpenAI prompt for final advice
        run: |
          {
            echo "You are a pragmatic CI advisor."
            echo "Summarize: test status (${{ needs.traditional-tests.result }}), build status (${{ needs.build-check.result }}), coverage (${LINE_COV}%)."
            echo "Then give 3-5 prioritized, actionable next steps."
          } > final-openai-prompt.txt

      - name: 🧠 Call OpenAI for final advice
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "OpenAI not configured" > final-advice.md
          else
            PAYLOAD=$(jq -n \
              --arg content "$(< final-openai-prompt.txt)" \
              '{model:"gpt-4o-mini",temperature:0,messages:[{role:"system",content:"Be concise and actionable."},{role:"user",content:$content}] }')
            curl -sS https://api.openai.com/v1/chat/completions \
              -H "Authorization: Bearer $OPENAI_API_KEY" -H "Content-Type: application/json" \
              --data "$PAYLOAD" -o final.openai.json
            jq -r '.choices[0].message.content // "No content"' final.openai.json > final-advice.md
          fi

      - name: 📥 Fetch PR AI comments (quality and secrets)
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="${{ github.repository }}"
          PR="${{ github.event.pull_request.number }}"
          curl -sS -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/issues/$PR/comments?per_page=100" > pr-comments.json
          QUALITY=$(jq -r '[ .[] | select(.body | contains("ai-code-quality")) ] | .[-1].body // ""' pr-comments.json)
          SECRETS=$(jq -r '[ .[] | select(.body | contains("ai-secret-scan")) ] | .[-1].body // ""' pr-comments.json)
          printf "%s" "$QUALITY" > quality-comment.md || true
          printf "%s" "$SECRETS" > secrets-comment.md || true

      - name: 📊 Generate comprehensive report
        run: |
          : "${LINE_COV:=N/A}"
          cat > ci-complete-report.md << 'EOF'
          # 🚀 CI/CD Complete Pipeline Report
          
          ## 📅 Execution Summary
          - **Workflow**: ${{ github.workflow }}
          - **Event**: ${{ github.event_name }}
          - **Branch**: ${{ github.ref_name }}
          - **Commit**: ${{ github.sha }}
          - **Timestamp**: $(date)
          
          ## 🔍 Job Status
          - **Traditional Tests**: ${{ needs.traditional-tests.result }}
          - **Build Check**: ${{ needs.build-check.result }}
          
          ## 📈 Test Results
          - **Coverage**: ${LINE_COV}%
          
          ## ✅ Code Quality Summary
          $(cat quality-comment.md 2>/dev/null || echo 'No AI code quality summary available')
          
          ## 🔒 Security (Secrets) Summary
          $(cat secrets-comment.md 2>/dev/null || echo 'No AI secrets summary available')
          
          ## 🧠 AI Advice
          $(cat final-advice.md 2>/dev/null || echo 'OpenAI not configured')
          EOF

      - name: 📤 Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: ci-complete-report
          path: ci-complete-report.md
          retention-days: 30

      - name: 💬 Comment final report on PR
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: ci-complete-report.md
          commentTag: ci-complete-report