name: PR Quality Gates

on:
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  quality-gates:
    name: Quality Gates Enforcement
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run all quality checks
        run: npm run ci:all
        
      - name: Quality Gates Summary
        run: |
          echo "## ðŸš¦ PR Quality Gates Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### âœ… Quality Checks Passed:" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality (ESLint + TypeScript)" >> $GITHUB_STEP_SUMMARY
          echo "- Security Audit & Patterns" >> $GITHUB_STEP_SUMMARY
          echo "- Unit & Integration Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Build Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸŽ‰ **All quality gates passed!** This PR is ready for review." >> $GITHUB_STEP_SUMMARY
          
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => comment.user.type === 'Bot' && comment.body.includes('ðŸš¦ PR Quality Gates Status'));
            
            const commentBody = `## ðŸš¦ PR Quality Gates Status

### âœ… Quality Checks Passed:
- **Code Quality** (ESLint + TypeScript)
- **Security Audit** & Patterns  
- **Unit & Integration Tests**
- **Build Validation**

ðŸŽ‰ **All quality gates passed!** This PR is ready for review.

---
*This comment was automatically generated by the CI/CD pipeline*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            }